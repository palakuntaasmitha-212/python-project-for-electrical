# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13ZG1ug4jSaZPV998ySzcSKo56ff7uYDE
"""

import numpy as np
import matplotlib.pyplot as plt

# --- Input Data ---
bus_data = np.array([
    [1, 0, 1.06, 0, 0, 0, 0, 0],        # Slack Bus
    [2, 2, 1.00, 0, 0, 0, 0.2, 0.1],    # PQ Bus
    [3, 2, 1.00, 0, 0, 0, 0.45, 0.15]   # PQ Bus
])

line_data = np.array([
    [1, 2, 0.02, 0.06, 0.03],
    [1, 3, 0.08, 0.24, 0.025],
    [2, 3, 0.06, 0.18, 0.02]
])

tolerance = 1e-6
max_iterations = 10

# --- Y-Bus Formation ---
def form_ybus(line_data, num_buses):
    Y = np.zeros((num_buses, num_buses), dtype=complex)
    for line in line_data:
        i, j = int(line[0]) - 1, int(line[1]) - 1
        R, X, B = line[2], line[3], line[4]
        Z = complex(R, X)
        Y_line = 1 / Z
        Y[i, i] += Y_line + 1j * B / 2
        Y[j, j] += Y_line + 1j * B / 2
        Y[i, j] -= Y_line
        Y[j, i] -= Y_line
    return Y

# --- Gauss-Seidel Load Flow ---
def gauss_seidel_load_flow(bus_data, line_data, max_iter, tol):
    nb = len(bus_data)
    Ybus = form_ybus(line_data, nb)
    V = np.array([bus[2] * np.exp(1j * np.radians(bus[3])) for bus in bus_data])
    P = (bus_data[:, 4] - bus_data[:, 6])
    Q = (bus_data[:, 5] - bus_data[:, 7])

    for iteration in range(max_iter):
        V_prev = V.copy()
        for i in range(nb):
            if bus_data[i, 1] == 0:
                continue
            sumYV = sum(Ybus[i, j] * V[j] for j in range(nb) if j != i)
            S = complex(P[i], Q[i])
            V[i] = (1 / Ybus[i, i]) * ((S.conjugate() / V[i].conjugate()) - sumYV)

        if np.max(np.abs(V - V_prev)) < tol:
            break

    # Calculate losses
    losses = 0
    for line in line_data:
        i, j = int(line[0]) - 1, int(line[1]) - 1
        Z = complex(line[2], line[3])
        I = (V[i] - V[j]) / Z
        losses += abs(I)**2 * Z.real

    # Efficiency
    total_load = np.sum(bus_data[:, 6])
    efficiency = (total_load / (total_load + losses)) * 100

    # Output
    print("\n--- Bus Voltages ---")
    for i, v in enumerate(V):
        print(f"Bus {i+1}: |V| = {abs(v):.4f} pu, Angle = {np.degrees(np.angle(v)):.4f}Â°")

    print(f"\nTotal Power Losses: {losses:.4f} MW")
    print(f"System Efficiency: {efficiency:.2f} %")

    return V, losses, efficiency

# --- Run and Get Results ---
voltages, losses, efficiency = gauss_seidel_load_flow(bus_data, line_data, max_iterations, tolerance)

# --- Plotting Bus Voltages ---
bus_ids = np.arange(1, len(voltages) + 1)
voltage_magnitudes = np.abs(voltages)
voltage_angles = np.degrees(np.angle(voltages))

plt.figure(figsize=(10, 5))

# Plot voltage magnitude
plt.subplot(1, 2, 1)
plt.bar(bus_ids, voltage_magnitudes, color='skyblue')
plt.xlabel('Bus Number')
plt.ylabel('Voltage Magnitude (pu)')
plt.title('Bus Voltage Magnitudes')
plt.grid(True)

# Plot voltage angle
plt.subplot(1, 2, 2)
plt.bar(bus_ids, voltage_angles, color='salmon')
plt.xlabel('Bus Number')
plt.ylabel('Voltage Angle (degrees)')
plt.title('Bus Voltage Angles')
plt.grid(True)

plt.tight_layout()
plt.show()