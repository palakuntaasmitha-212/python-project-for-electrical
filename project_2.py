# -*- coding: utf-8 -*-
"""Project.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vMVgs3LpgdM1QV-HVioh_tciTp3FuN-U
"""

import numpy as np

# System data
Y_bus = np.array([[10-30j, -5+15j, -5+15j],
                  [-5+15j, 10-30j, -5+15j],
                  [-5+15j, -5+15j, 10-30j]])

P_spec = np.array([0, -1.0, -0.5])  # Net active power injections (pu)
Q_spec = np.array([0, -0.5, -0.2])  # Net reactive power injections (pu)

V = np.array([1+0j, 1+0j, 1+0j])    # Initial voltages
max_iter = 10
tol = 1e-6

# Newton-Raphson iteration
for iteration in range(max_iter):
    P_calc = np.zeros(3)
    Q_calc = np.zeros(3)

    for i in range(3):
        for k in range(3):
            P_calc[i] += abs(V[i]) * abs(V[k]) * (Y_bus[i,k].real * np.cos(np.angle(V[i]) - np.angle(V[k])) +
                                                  Y_bus[i,k].imag * np.sin(np.angle(V[i]) - np.angle(V[k])))
            Q_calc[i] += abs(V[i]) * abs(V[k]) * (Y_bus[i,k].real * np.sin(np.angle(V[i]) - np.angle(V[k])) -
                                                  Y_bus[i,k].imag * np.cos(np.angle(V[i]) - np.angle(V[k])))

    dP = P_spec[1:] - P_calc[1:]
    dQ = Q_spec[1:] - Q_calc[1:]
    mismatch = np.concatenate((dP, dQ))

    if np.all(np.abs(mismatch) < tol):
        print(f"Converged in {iteration} iterations")
        break

    # Update angles and voltage magnitudes (simplified Jacobian approximation)
    delta_theta = dP / 10
    delta_V = dQ / 10

    # Update voltage values
    for i in range(1, 3):
        V[i] = abs(V[i]) + delta_V[i-1] + 1j * delta_theta[i-1]
        V[i] = abs(V[i]) * np.exp(1j * np.angle(V[i]))

# Print final bus voltages
for i in range(3):
    print(f"Bus {i+1}: V = {abs(V[i]):.4f} ∠ {np.angle(V[i]) * 180/np.pi:.2f}°")